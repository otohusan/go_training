// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/studysetRepository.go
//
// Generated by this command:
//
//	mockgen -source=domain/repository/studysetRepository.go -destination=domain/repository/mocks/studysetRepository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "go-training/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStudySetRepository is a mock of StudySetRepository interface.
type MockStudySetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStudySetRepositoryMockRecorder
}

// MockStudySetRepositoryMockRecorder is the mock recorder for MockStudySetRepository.
type MockStudySetRepositoryMockRecorder struct {
	mock *MockStudySetRepository
}

// NewMockStudySetRepository creates a new mock instance.
func NewMockStudySetRepository(ctrl *gomock.Controller) *MockStudySetRepository {
	mock := &MockStudySetRepository{ctrl: ctrl}
	mock.recorder = &MockStudySetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudySetRepository) EXPECT() *MockStudySetRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStudySetRepository) Create(studySet *model.StudySet) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", studySet)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStudySetRepositoryMockRecorder) Create(studySet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStudySetRepository)(nil).Create), studySet)
}

// Delete mocks base method.
func (m *MockStudySetRepository) Delete(authUserID, studySetID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", authUserID, studySetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStudySetRepositoryMockRecorder) Delete(authUserID, studySetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStudySetRepository)(nil).Delete), authUserID, studySetID)
}

// GetByID mocks base method.
func (m *MockStudySetRepository) GetByID(id string) (*model.StudySet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.StudySet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStudySetRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStudySetRepository)(nil).GetByID), id)
}

// GetByUserID mocks base method.
func (m *MockStudySetRepository) GetByUserID(userID string) ([]*model.StudySet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].([]*model.StudySet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockStudySetRepositoryMockRecorder) GetByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockStudySetRepository)(nil).GetByUserID), userID)
}

// SearchByKeyword mocks base method.
func (m *MockStudySetRepository) SearchByKeyword(keyword string) ([]*model.StudySet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByKeyword", keyword)
	ret0, _ := ret[0].([]*model.StudySet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByKeyword indicates an expected call of SearchByKeyword.
func (mr *MockStudySetRepositoryMockRecorder) SearchByKeyword(keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByKeyword", reflect.TypeOf((*MockStudySetRepository)(nil).SearchByKeyword), keyword)
}

// Update mocks base method.
func (m *MockStudySetRepository) Update(authUserID, studySetID string, studySet *model.StudySet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", authUserID, studySetID, studySet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStudySetRepositoryMockRecorder) Update(authUserID, studySetID, studySet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStudySetRepository)(nil).Update), authUserID, studySetID, studySet)
}
