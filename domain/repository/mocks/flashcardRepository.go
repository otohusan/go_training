// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/flashcardRepository.go
//
// Generated by this command:
//
//	mockgen -source=domain/repository/flashcardRepository.go -destination=domain/repository/mocks/flashcardRepository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "go-training/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFlashcardRepository is a mock of FlashcardRepository interface.
type MockFlashcardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFlashcardRepositoryMockRecorder
}

// MockFlashcardRepositoryMockRecorder is the mock recorder for MockFlashcardRepository.
type MockFlashcardRepositoryMockRecorder struct {
	mock *MockFlashcardRepository
}

// NewMockFlashcardRepository creates a new mock instance.
func NewMockFlashcardRepository(ctrl *gomock.Controller) *MockFlashcardRepository {
	mock := &MockFlashcardRepository{ctrl: ctrl}
	mock.recorder = &MockFlashcardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlashcardRepository) EXPECT() *MockFlashcardRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFlashcardRepository) Create(authUSerID string, flashcard *model.Flashcard) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", authUSerID, flashcard)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFlashcardRepositoryMockRecorder) Create(authUSerID, flashcard any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlashcardRepository)(nil).Create), authUSerID, flashcard)
}

// Delete mocks base method.
func (m *MockFlashcardRepository) Delete(authUSerID, flashcardID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", authUSerID, flashcardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFlashcardRepositoryMockRecorder) Delete(authUSerID, flashcardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFlashcardRepository)(nil).Delete), authUSerID, flashcardID)
}

// GetByID mocks base method.
func (m *MockFlashcardRepository) GetByID(id string) (*model.Flashcard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.Flashcard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockFlashcardRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockFlashcardRepository)(nil).GetByID), id)
}

// GetByStudySetID mocks base method.
func (m *MockFlashcardRepository) GetByStudySetID(studySetID string) ([]*model.Flashcard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStudySetID", studySetID)
	ret0, _ := ret[0].([]*model.Flashcard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStudySetID indicates an expected call of GetByStudySetID.
func (mr *MockFlashcardRepositoryMockRecorder) GetByStudySetID(studySetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStudySetID", reflect.TypeOf((*MockFlashcardRepository)(nil).GetByStudySetID), studySetID)
}

// Update mocks base method.
func (m *MockFlashcardRepository) Update(authUSerID string, flashcard *model.Flashcard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", authUSerID, flashcard)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFlashcardRepositoryMockRecorder) Update(authUSerID, flashcard any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFlashcardRepository)(nil).Update), authUSerID, flashcard)
}
